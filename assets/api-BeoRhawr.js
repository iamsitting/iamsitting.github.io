const a=new Map;function g(t){return a.has(t)||a.set(t,a.size+1),a.get(t)}async function c(){const t=await fetch("/posts.version.json");if(!t.ok)throw new Error("Failed to fetch posts version");const{version:o}=await t.json(),r=await fetch(`/posts.${o}.json`);if(!r.ok)throw new Error("Failed to fetch posts");return r.json()}const h=async(t=1,o="",r)=>{try{let e=await c();if(o){const s=o.toLowerCase();e=e.filter(n=>n.title.toLowerCase().includes(s)||n.description.toLowerCase().includes(s))}r&&(e=e.filter(s=>s.category&&g(s.category.name)===r)),e.sort((s,n)=>new Date(n.publishedAt).getTime()-new Date(s.publishedAt).getTime());const i=(t-1)*10,l=i+10;return{posts:e.slice(i,l),pagination:{page:t,pageSize:10,pageCount:Math.ceil(e.length/10),total:e.length}}}catch(e){throw console.error("Error fetching posts:",e),new Error("Server error")}},p=async t=>{try{return(await c()).find(e=>e.slug===t)||null}catch(o){throw console.error("Error fetching post:",o),new Error("Server error")}},f=async()=>{try{const t=await c(),o=new Map;return t.forEach(r=>{if(r.category&&!o.has(r.category.name)){const e=g(r.category.name);o.set(r.category.name,{documentId:e,name:r.category.name,description:""})}}),Array.from(o.values())}catch(t){throw console.error("Error fetching categories:",t),new Error("Server error")}};export{f as a,p as b,h as g};
