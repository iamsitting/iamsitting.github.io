const i=new Map;function l(e){return i.has(e)||i.set(e,i.size+1),i.get(e)}async function c(){const e=await fetch("/posts.version.json");if(!e.ok)throw new Error("Failed to fetch posts version");const{version:o}=await e.json(),s=await fetch(`/posts.${o}.json`);if(!s.ok)throw new Error("Failed to fetch posts");return s.json()}const h=async(e=1,o="",s)=>{try{let t=await c();if(o){const r=o.toLowerCase();t=t.filter(n=>n.title.toLowerCase().includes(r)||n.description.toLowerCase().includes(r))}s&&(t=t.filter(r=>r.categories.some(n=>l(n.name)===s))),t.sort((r,n)=>new Date(n.publishedAt).getTime()-new Date(r.publishedAt).getTime());const a=(e-1)*10,p=a+10;return{posts:t.slice(a,p),pagination:{page:e,pageSize:10,pageCount:Math.ceil(t.length/10),total:t.length}}}catch(t){throw console.error("Error fetching posts:",t),new Error("Server error")}},w=async e=>{try{return(await c()).find(t=>t.slug===e)||null}catch(o){throw console.error("Error fetching post:",o),new Error("Server error")}},f=async()=>{try{const e=await c(),o=new Map;return e.forEach(s=>{s.categories.forEach(t=>{if(!o.has(t.name)){const a=l(t.name);o.set(t.name,{documentId:a,name:t.name,description:""})}})}),Array.from(o.values())}catch(e){throw console.error("Error fetching categories:",e),new Error("Server error")}};export{f as a,w as b,h as g};
