const i=new Map;function l(e){return i.has(e)||i.set(e,i.size+1),i.get(e)}async function p(){const e=await fetch("/posts.version.json");if(!e.ok)throw new Error("Failed to fetch posts version");const{version:t}=await e.json(),o=await fetch(`/posts.${t}.json`);if(!o.ok)throw new Error("Failed to fetch posts");return o.json()}async function h(){const e=await fetch("/papers.version.json");if(!e.ok)throw new Error("Failed to fetch papers version");const{version:t}=await e.json(),o=await fetch(`/papers.${t}.json`);if(!o.ok)throw new Error("Failed to fetch papers");return o.json()}const g=async(e=1,t="",o)=>{try{let r=await p();if(t){const a=t.toLowerCase();r=r.filter(s=>s.title.toLowerCase().includes(a)||s.description.toLowerCase().includes(a))}o&&(r=r.filter(a=>a.categories.some(s=>{const w=Array.isArray(s.name)?s.name[0]:s.name;return l(w)===o}))),r.sort((a,s)=>new Date(s.publishedAt).getTime()-new Date(a.publishedAt).getTime());const n=(e-1)*10,c=n+10;return{posts:r.slice(n,c),pagination:{page:e,pageSize:10,pageCount:Math.ceil(r.length/10),total:r.length}}}catch(r){throw console.error("Error fetching posts:",r),new Error("Server error")}},u=async e=>{try{return(await p()).find(r=>r.slug===e)||null}catch(t){throw console.error("Error fetching post:",t),new Error("Server error")}},d=async()=>{try{const e=await p(),t=new Map;return e.forEach(o=>{o.categories.forEach(r=>{const n=Array.isArray(r.name)?r.name[0]:r.name;if(!t.has(n)){const c=l(n);t.set(n,{documentId:c,name:n,description:""})}})}),Array.from(t.values())}catch(e){throw console.error("Error fetching categories:",e),new Error("Server error")}},E=async e=>{try{return(await h()).find(r=>r.slug===e)||null}catch(t){throw console.error("Error fetching paper:",t),new Error("Server error")}};export{d as a,u as b,E as c,g};
