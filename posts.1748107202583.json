[
  {
    "slug": "eating-in-1-corinthians",
    "title": "Eating in 1 Corinthians",
    "description": "Exploring the theme of eating in 1 Corinthians",
    "publishedAt": "2025-05-24",
    "author": {
      "name": "Carlos Salamanca"
    },
    "categories": [
      {
        "name": "Bible"
      }
    ],
    "content": "\n# Eating in 1 Corinthians: Why Our Spiritual Diet Matters\n\nIf you look closely at 1 Corinthians, a surprising theme starts to emerge: **eating**. Not just literal meals, but meals with deep spiritual meaning. Paul weaves this theme throughout the letter, often reaching back to the Exodus story to make his point.\n\nIt might feel unexpected at first. Why is something as ordinary as eating so central to the Christian life?\n\nBut the more you look into it, the clearer it becomes: in God’s eyes, what we take in — spiritually speaking — plays a key role in who we become.\n\n## A Pattern from Exodus\n\nPaul doesn’t pull these ideas out of thin air. He often references Israel’s journey out of Egypt as a kind of spiritual blueprint. Just like the Israelites were saved from Egypt, passed through the sea, and then fed in the wilderness, we too are on a journey — and we’re meant to be nourished along the way.\n\nIn 1 Corinthians 10:3–4, Paul writes:\n\n> \"They all ate the same spiritual food and drank the same spiritual drink. For they drank from the spiritual rock that followed them, and the rock was Christ.\"\n\nIt’s not just a poetic metaphor. Paul’s saying: **Christ was their sustenance**. And He’s meant to be ours too.\n\n## Chapter 5: Beginning with the Passover\n\nIn chapter 5, Paul refers to Christ as our Passover:\n\n> “Christ, our Passover lamb, has been sacrificed. Therefore, let us keep the feast...” (v.7–8)\n\nThis points back to the original Passover in Exodus. It wasn’t just about blood on the doorposts; it was also about **eating the lamb**. That’s how Israel was strengthened to leave Egypt.\n\nIn the same way, we don’t just believe in Christ—we're invited to **take Him in**, to be nourished by Him. The Christian life starts with that kind of receiving.\n\n## Chapter 10: Food, Drink, and the Table\n\nChapter 10 takes the imagery further. First, Paul reminds the Corinthians that Israel was sustained in the wilderness by food and drink that symbolized Christ. Then, he brings the focus to the present:\n\n> “The cup of blessing… is it not a participation in the blood of Christ? The bread that we break, is it not a participation in the body of Christ?” (v.16)\n\nThis is where the spiritual eating becomes personal. The Lord’s Table isn’t just a tradition; it’s a moment of real connection. A sharing. A partaking.\n\nWe’re not just remembering Christ — we’re participating in Him. Receiving His life. Being joined together in His body. It’s a communal meal, but it’s also deeply personal.\n\n## Chapter 14: A Kind of Spiritual Potluck\n\nBy the time we get to chapter 14, the language shifts, but the idea is still there. Paul describes a church gathering where “each one” brings something: a hymn, a teaching, a revelation.\n\nIt’s not described in terms of food, but the dynamic is similar: **everyone contributes, and everyone is fed**. It’s less about one person delivering content and more about the whole community sharing Christ with each other.\n\nThis, too, echoes the Old Testament feasts — times when God’s people came together, bringing something of what they had received, and shared in joyful fellowship.\n\n---\n\n## Why It Matters\n\nIt’s easy to think of the Christian life in terms of what we’re supposed to do. But 1 Corinthians invites us to think in terms of **what (or who) we’re taking in**.\n\nSpiritual growth isn’t just about effort or discipline. It’s about being nourished — regularly, deeply, and together with others. The more we feed on Christ, the more He becomes part of who we are.\n\nThat’s how change happens. That’s how the old patterns lose their grip. That’s how God’s purpose — to dwell in us and express Himself through us — becomes real.\n\n---\n\n## TL;DR\n\n- **Chapter 5** points to Christ as our Passover, the One we begin with by eating.\n- **Chapter 10** reminds us that Christ is our spiritual food and drink, and that the Lord’s Table is a real participation in His life.\n- **Chapter 14** shows the church as a place where everyone brings something of Christ to share.\n\nIn all of this, eating is more than imagery — it’s a way to describe how God works Himself into us, not through obligation but through nourishment.\n\n---\n\n## A Final Word\n\nThe question isn’t just “What should I be doing as a Christian?” but “What am I feeding on?”\n\nAre we taking in Christ — in the Word, in prayer, in the Lord’s table, and even through one another in community?\n\nBecause that’s where transformation happens. Quietly, consistently, just like daily meals. It’s not always dramatic, but it’s always essential.\n\nWe become what we eat. And God’s desire is that we would become people who don’t just follow Christ — but people **filled with Him**."
  },
  {
    "slug": "christ-crucified-power-wisdom",
    "title": "Christ Crucified: The Power and Wisdom of God",
    "description": "What exactly does power and wisdom mean?",
    "publishedAt": "2025-05-17",
    "author": {
      "name": "Carlos Salamanca"
    },
    "categories": [
      {
        "name": "Bible"
      }
    ],
    "content": "\n# Christ Crucified: The Power and Wisdom of God\n\nIn 1 Corinthians 1:23–24, Paul makes a bold and surprising claim:\n\n> “We preach Christ crucified, to Jews a stumbling block and to Gentiles foolishness, but to those who are called, both Jews and Greeks, **Christ the power of God and the wisdom of God**.”\n\nLet that sink in. The cross—the very symbol of weakness, shame, and apparent defeat—is God’s ultimate display of **power** and **wisdom**.\n\nTo the religious mind, it’s offensive.  \nTo the intellectual mind, it’s foolish.  \nBut to those who have come to know Christ personally, it’s everything.\n\nWe don’t just admire the cross. We **live** by it.\n\n---\n\n## When Power Looks Like Weakness\n\nLet’s talk about **power**.\n\nWe often feel powerless. Powerless against a sinful habit we keep falling into. Powerless in a moment of conflict when our temper flares up again. Powerless when our mind is flooded with anxiety and we don’t know how to push through. Or maybe it's subtler—feeling helpless to love someone we just don’t click with, or to overcome our laziness when we know we should pray or serve.\n\nIn those moments, we instinctively try harder. We grit our teeth. We make vows. And often... we fail again.\n\nBut **Romans 6:6** tells us something radical:\n\n> “Our old man has been crucified with Him, in order that the body of sin might be annulled, that we should no longer serve sin as slaves.”\n\nThe cross isn’t just a historical event—it’s **our spiritual reality**. The part of us that keeps falling short—our old man—was dealt with at the cross. That means real power isn’t about trying harder. It’s about recognizing that **Christ already overcame**, and learning to live by the One who now lives in us.\n\nThat’s what **Galatians 2:20** means:\n\n> “I have been crucified with Christ; and it is no longer I who live, but Christ lives in me…”\n\nWe experience God's power when we stop relying on ourselves and begin depending on Christ in us. This doesn’t look dramatic. It may be as simple as stopping in the middle of an argument and inwardly saying, *“Lord, I can’t. But You can.”*\n\n---\n\n## When Wisdom Isn’t What We Expect\n\nNow let’s consider **wisdom**.\n\nWe usually think of wisdom as knowing the right answer, making the smart choice, or avoiding mistakes. But God’s wisdom is different—it’s not primarily about solving problems, but about **producing a person**.\n\nIn **1 Corinthians 1:30**, Paul writes:\n\n> “But of Him you are in Christ Jesus, who became to us wisdom from God: both **righteousness and sanctification and redemption**.”\n\nNotice—Christ doesn't just give us wisdom. He **is** our wisdom. And that wisdom unfolds as God's full salvation:\n\n- **Righteousness** in our spirit — when we were born again and justified.  \n- **Sanctification** in our soul — as we are transformed day by day.  \n- **Redemption** in our body — when we are glorified at Christ’s return.\n\nThis is wisdom not just for theology books—it’s wisdom for your Tuesday morning when you’re overwhelmed at work. It’s wisdom for your relationships, your parenting, your reactions. It’s wisdom for every time you think, *“I should know better,”* but realize you still fall short.\n\nWisdom, in God’s eyes, isn’t about perfection. It’s about **participation**—letting Christ live through us in the everyday.\n\n---\n\n## So What Does This Mean For Us?\n\nThe cross shows us a new way to live. Not by **self-effort**, but by **union**. Not by being clever or strong, but by being **dependent**.\n\nHere’s the irony: the cross looks like loss, but it’s gain. It feels like death, but it brings life.\n\nSo next time you feel defeated—by sin, by pressure, by weakness—remember: the answer isn’t to try harder. The answer is to turn inwardly to Christ. To let His death work in your self-life, and His life rise in you afresh.\n\nAnd when you’re confused, unsure of what to do or who to be—remember: Christ is your wisdom. He’s in you to walk you through every step, not always with explanations, but with presence.\n\n---\n\n## TL;DR\n\n**Christ crucified is not a past event to admire—it’s a present reality to live.**  \n- As **God’s power**, the cross delivers us from sin, self, and the world.  \n- As **God’s wisdom**, the cross brings us into Christ as our righteousness, sanctification, and redemption.  \n\nIt may look weak and foolish—but in God’s kingdom, **that’s the very path to life**."
  },
  {
    "slug": "art-of-scalability-clarity-capacity",
    "title": "The Art of Scalability: Clarity and Capacity",
    "description": "How understanding ownership and resources can transform team execution",
    "publishedAt": "2025-05-13",
    "author": {
      "name": "Carlos Salamanca"
    },
    "categories": [
      {
        "name": "Leadership"
      }
    ],
    "content": "\n# The Art of Scalability: Clarity and Capacity\n\nEver been on a team where no one's quite sure who owns what? Where two people do the same thing—or worse, no one does it?\n\nYeah, me too.\n\nLast week I started reading *The Art of Scalability* by Abbott and Fisher, and Chapter 2 put words to that mess.\n\nIt's not always a people problem—it's often a structure problem.\nSpecifically: a lack of clarity and capacity.\n\n## The Two Key Ingredients\n\n**Clarity** = knowing what you're responsible for (and what you're not)  \n**Capacity** = having enough people in the right places to deliver\n\nWithout those two things, teams can't execute. They just improvise.\n\nSometimes it works. Often, it doesn't.\n\n## The Impact\n\nThat hit me. Because I've seen the fallout of missing clarity and capacity—not in big orgs, but in small teams, even side projects.\n\nThings slip. Stress creeps in. No one's slacking—it's just hard to move when the ground's uncertain.\n\n## The Transformation\n\nWhen teams get clarity and capacity right, something magical happens.\n\nThings move. People step up. Execution sharpens.\n\nYou can feel the difference—and it makes you want to build even more.\n\n## Understanding Clarity\n\nClarity isn't just about job titles or org charts. It's about:\n\n1. **Ownership**: Who's the final decision maker? Who's accountable?\n2. **Boundaries**: What's in scope? What's out of scope?\n3. **Dependencies**: Who needs what from whom?\n4. **Success Metrics**: How do we know we're winning?\n\nI've seen teams where everyone's trying to be helpful, but no one's quite sure who should make the call. The result? Decision paralysis or, worse, conflicting decisions.\n\n### A Common Scenario\n\nPicture this: Three engineers are working on the same feature, each with their own approach. Sounds collaborative, right? But it leads to:\n\n- Duplicate work\n- Inconsistent implementations\n- Wasted time in meetings to align\n- Frustration when changes conflict\n\nThe fix isn't complex. The team:\n1. Assigns a clear owner\n2. Defines the boundaries\n3. Sets up regular sync points\n4. Establishes clear success criteria\n\nSuddenly, the same team is moving faster, with less stress.\n\n## Building Capacity\n\nCapacity isn't just about headcount. It's about:\n\n1. **Skills**: Do we have the right expertise?\n2. **Time**: Do people have space to do their best work?\n3. **Tools**: Are we giving teams what they need?\n4. **Support**: Is there help when things get tough?\n\n### The Capacity Trap\n\nMany leaders fall into this trap: thinking more people = more capacity. But that's not always true. Sometimes it's about:\n\n- Removing bottlenecks\n- Automating repetitive tasks\n- Providing better tools\n- Creating space for deep work\n\n## Putting It Together\n\nThe magic happens when clarity and capacity work together:\n\n1. **Clear Ownership + Right Skills**: People know what to do and can do it well\n2. **Defined Boundaries + Proper Tools**: Teams can move fast without stepping on toes\n3. **Clear Metrics + Adequate Time**: Success is measurable and achievable\n\n## Practical Steps\n\nIf you're feeling the pain of unclear ownership or stretched capacity, try these steps:\n\n1. **Map Your Current State**\n   - List all major responsibilities\n   - Note who's doing what\n   - Identify gaps and overlaps\n\n2. **Define Clear Ownership**\n   - Assign single owners for each area\n   - Document responsibilities\n   - Set up regular review points\n\n3. **Assess Capacity**\n   - Look at current workload\n   - Identify bottlenecks\n   - Plan for growth\n\n4. **Create Feedback Loops**\n   - Regular check-ins\n   - Clear escalation paths\n   - Open communication channels\n\n## The Payoff\n\nWhen you get clarity and capacity right, you'll see:\n\n- Faster decision-making\n- Higher team morale\n- Better quality output\n- More innovation\n- Sustainable growth\n\nIt's not about creating bureaucracy. It's about creating the space and structure for teams to do their best work.\n\n## Moving Forward\n\nAs teams continue to scale, keeping these principles front and center becomes crucial. It's not always easy—sometimes it means having tough conversations about ownership or making hard decisions about resources.\n\nBut when you see a team that's clear on their mission and has the capacity to execute, it's worth every bit of effort.\n\nBecause that's when the real magic happens."
  },
  {
    "slug": "romans-8-law-of-the-spirit",
    "title": "The Law That Liberates: Living by the Spirit in Romans 8",
    "description": "Diving into the law of the Spirit of life",
    "publishedAt": "2025-05-09",
    "author": {
      "name": "Carlos Salamanca"
    },
    "categories": [
      {
        "name": "Bible"
      }
    ],
    "content": "\n# The Law That Liberates: Living by the Spirit in Romans 8\n\nRomans 8:2 unveils a profound spiritual principle:  \n> \"For the law of the Spirit of life in Christ Jesus has set you free from the law of sin and of death.\"\n\nPaul is not referring to commandments or a moral code. This \"law\" is a **living principle**, an automatic dynamic—like the law of gravity—that operates **spontaneously** in those who are in Christ. It's not something we work to uphold, but something that works **in us**, when we remain in fellowship with Him.\n\n## A Law That Frees\n\nWhat’s revolutionary is what this law does:  \nIt **sets us free**.\n\nIt frees us not only from **sin’s power**, but from the **self-effort** to escape it. We are liberated from the exhausting cycle of failure—not by trying harder, but by being **connected to the Spirit of life**.  \nThis is the secret to the Christian experience:  \n> **Freedom is not achieved by striving, but by abiding.**\n\nThe One who declared “the year of the Lord’s favor” (Luke 4:19)—the year of jubilee—has become **the Spirit** (2 Cor. 3:17). And where the Spirit is, **there is freedom**.\n\nThus, the \"law of the Spirit of life\" is God’s way of releasing us—not by external control, but by internal vitality. As we enjoy and turn to the Lord, this law spontaneously overcomes the law of sin and death within us.\n\n## The Key Is Dependence\n\nBut what does this look like practically?  \nRomans 8 gives us a picture—not of striving, but of **depending**.\n\nIn my early Christian years, I often heard words like *obedience*, *submission*, and *surrender*. These are good and biblical terms, but sometimes they left me focused on my own will and effort.\n\nRomans 8 offers something more organic: **dependence**.\n\n> Romans 8:4 speaks of “walking according to the Spirit.”  \n> The phrase “according to” can also mean “in line with” or “alongside”—like a cane.\n\nA man doesn’t obey his cane. He doesn’t submit to it.  \nHe **depends** on it to take his next step.\n\nTo walk according to the Spirit is to live **in step** with the Spirit—leaning on Him moment by moment, like a man walking with a cane.\n\n## Minding the Spirit\n\nRomans 8:5 says we are to **“mind the things of the Spirit.”**  \nThis isn’t about rules—it’s about **relationship**.\n\nFor example, in a healthy marriage, a wife may care not just about what her husband says explicitly, but **how he feels about something**—even if it’s unspoken. Say she’s choosing an outfit for a formal event. She may recall her husband’s quiet delight over a certain color—not because he instructed her, but **because she’s attuned to his feelings**. This isn’t mere submission; it’s fellowship, affection, and consideration.\n\nIn the same way, to “mind the things of the Spirit” (Romans 8:5) is not about law-keeping—it’s about living in step with the Lord’s heart, responding not just to His commands, but **to His inner feeling.**\n\nThis isn’t cold obedience—it’s a warm, living fellowship.\n\n## Sons Who Cry\n\nThe climax of Romans 8 is found in verse 15:\n\n> *“You have received the Spirit of sonship, by whom we cry, ‘Abba, Father!’”*\n\nThis is the most personal expression of our life in Christ:  \n**Dependence that turns into a cry.**\n\nMy children express their sonship not only by obeying me or representing me, but by **needing me**. When they cry, “Daddy,” they show they know who I am to them.\n\nOur life in Christ is the same.\n\nThe truest mark of sonship is not how well we perform—but how deeply we **depend**.  \nAnd out of that dependence comes the cry:  \n**“Abba, Father.”**\n\n---\n\n## TL;DR\n\n- Romans 8:2 speaks of a **living, liberating law**—the law of the Spirit of life.\n- This law frees us not only from **sin**, but from the **struggle** to escape sin through our own effort.\n- Freedom comes by **abiding**, not striving—by depending on the Spirit in our daily walk.\n- To walk “according to the Spirit” is like **leaning on a cane**—constant, moment-by-moment reliance.\n- Minding the Spirit means **caring for the Lord’s heart**, not just His commands.\n- Our highest expression as sons is not obedience alone, but the **cry of dependence**:  \n  > “Abba, Father.”\n\nThis is the reality of the Christian life:  \n**A life of freedom, formed by dependence, and filled with the Spirit.**"
  },
  {
    "slug": "simple-leadership-principle-software-engineering",
    "title": "Simple: A Leadership Principle in Software Engineering",
    "description": "Some reflections on Extreme Ownership",
    "publishedAt": "2025-05-06",
    "author": {
      "name": "Carlos Salamanca"
    },
    "categories": [
      {
        "name": "Leadership"
      }
    ],
    "content": "\nI've been on paternity leave recently, and between newborn naps and toddler playtime, I've finally had a little more space to read. I'm working through Extreme Ownership as part of a book club at BuildWitt and one principle in particular has stuck with me: \"Simple.\"\n\nJocko Willink explains that if a plan or message isn't simple, it won't be understood — and if it's not understood, it won't be executed, especially under pressure.\n\nThat makes perfect sense in high-stakes environments like the military. But it also made me wonder: How does this apply to software? Because let's face it — software gets complex fast, especially as teams grow and systems scale.\n\nHere's where I landed:\n\nSimple doesn't mean simplistic. In engineering, \"simple\" often means clear. Clear boundaries between services. Clear naming. Clear documentation. Clear expectations between teammates.\n\nYes, some complexity is necessary. But before introducing it, I've found it helpful to ask:\n\n- What problem is this really solving?\n- Will this be obvious to someone joining the team six months from now?\n- Can this be explained in a few sentences without whiteboarding the whole system?\n- Are we adding flexibility for a real use case, or just in case?\n\nAnd when complexity is justified, I've learned that simplicity still matters — especially in how we communicate it. Whether it's a good diagram, a well-structured doc, or a thoughtful conversation, simplicity shows up in how we lead.\n\nIt's a good reminder: clarity isn't just a design goal — it's a leadership habit.\n"
  },
  {
    "slug": "seed-of-david-son-of-god-romans",
    "title": "The Seed of David Becoming the Son of God",
    "description": "An exploration in to Romans 1:3-4",
    "publishedAt": "2025-05-04",
    "author": {
      "name": "Carlos Salamanca"
    },
    "categories": [
      {
        "name": "Bible"
      }
    ],
    "content": "\n# The Seed of David Becoming the Son of God\n\nIn Romans 1:3–4, Paul introduces Jesus Christ with two profound titles:  \nHe is the **Seed of David according to the flesh**, and the **Son of God in power according to the Spirit of holiness out of the resurrection of the dead**.\n\nThis introduction reveals Christ's **two natures**:\n\n- As the **Seed of David**, He is a genuine man—born of a woman, descended from David, possessing the human nature God created in Adam. This nature was **untainted by sin**.\n- As the **Son of God**, He is divine—eternally begotten of the Father, possessing God's life and nature.\n\nYet what is striking is Paul's choice of the word **\"designated\"** (or \"marked out\"):  \nHe writes that this Jesus, who came from David's line, was **designated Son of God in power… out of the resurrection of the dead**.\n\nWait—wasn't Jesus always the Son of God?\n\nYes. According to John 3:16, He is the **only begotten Son**, given to the world. He was God’s Son **before** the resurrection. But Paul is not speaking of His **eternal status**, but rather of something that happened **through resurrection**.\n\nTo understand this, we need to read **Acts 13:33**, where Paul applies **Psalm 2** to Jesus’ resurrection:\n\n> “You are My Son; today I have begotten You.”\n\nPaul interprets the **“today”** as the day of **resurrection**.  \nIn other words, Jesus’ resurrection was a kind of **begetting**—a public designation, even an *uplifting*, of His humanity.\n\nThough His humanity was sinless and perfect, it was not yet **glorified**. Through death and resurrection, God uplifted that humanity—uniting it fully with divinity in glory. This is why Paul says He was *designated Son of God in power*. What God had sought in Adam, He finally gained in Christ—God and man joined **not just in person**, but in **process and result**.\n\nThis is confirmed in **Hebrews 2:10** and **6:20**—Jesus is now the **Forerunner**, leading **many sons into glory**. This is not just leadership by authority, but by **pattern** and **participation**.\n\nIn **Romans 8:29**, Paul calls Him the **Firstborn among many brothers**.  \nHe is no longer the only begotten—He’s the **Firstborn**.  \nThat implies there are others.\n\nWho are they?\n\nAccording to **1 Peter 1:3**, *“God… has regenerated us… through the resurrection of Jesus Christ.”*\n\nHis resurrection was both His **designation** and our **regeneration**.\n\nNow, we too are on the same path. We are being **conformed to His image** (Rom. 8:29).  \nThis is the essence of the Christian life: not just to believe in Christ, but to **become like Christ**.\n\nSo when we pray, when we worship, when we serve—we are not just performing Christian activity.  \nWe are participating in a process:  \nWe are being conformed to the One who was designated Son of God in power.\n\n---\n\n## TL;DR\n\n- Jesus Christ is both **the Seed of David** (a genuine man) and **the Son of God** (divine).\n- Though always the Son, He was **designated Son of God in power** through **resurrection**—His perfect humanity was uplifted and glorified.\n- That resurrection was also **our regeneration** (1 Peter 1:3).\n- Now He is the **Firstborn among many brothers** (Rom. 8:29)—and we are being **conformed to His image**.\n- The Christian life is not just about doing things for God; it’s about being **transformed into the image of the resurrected, designated Son of God**.\n- This gives meaning to everything we do as believers.\n\n[Back to Home](/) "
  },
  {
    "slug": "correlating-hangfire-jobs-http-requests-datadog",
    "title": "Correlating Hangfire Background Jobs with HTTP Requests Using Datadog and .NET",
    "description": "Let's look at how to correlate hangfire jobs with http requests using datadog",
    "publishedAt": "2025-03-04",
    "author": {
      "name": "Carlos Salamanca"
    },
    "categories": [
      {
        "name": "Software Engineering"
      }
    ],
    "content": "\n# Correlating Hangfire Background Jobs with HTTP Requests Using Datadog and .NET\n\nDistributed tracing can feel like magic — until it doesn't work.\n\nRecently, while integrating observability into a .NET web app using **Datadog**, I hit a wall. I had traces from HTTP requests. I had logs. I had background jobs running through **Hangfire**. But there was one crucial gap:\n\n> **Traces from my background jobs weren't correlated with the original HTTP requests.**\n\nHere's how I fixed it, and more importantly — **what I learned about tracing and observability along the way**.\n\n---\n\n## 🤯 The Problem: Disconnected Traces\n\nIn a typical setup:\n\n- An HTTP request comes in.\n- You queue a background job to do some work (via Hangfire).\n- That job executes *later*, often on a different thread or even a different machine.\n\nIf you're using **Datadog APM**, the default behavior is:\n\n- The HTTP request gets a trace.\n- The background job gets a *separate trace*.\n- You, the human, get lost trying to connect the dots.\n\nThat's because **traces don't magically carry over**. Unless you explicitly pass trace context, each job runs in its own isolated observability bubble.\n\n---\n\n## 🧠 A Quick Primer on Traces, Spans, and Context\n\nIf you're new to distributed tracing, here's what you need to know:\n\n- A **trace** represents the full journey of a request through a system.\n- A **span** is a single unit of work (e.g., an HTTP handler, a DB call, or a background job).\n- Every span has:\n  - A `trace_id` (identifying the whole trace)\n  - A `span_id` (identifying the specific work)\n  - A `parent_span_id` (the span that called it)\n\nTo connect your background job to the original HTTP request, you need to:\n\n1. **Capture the trace and span info when queuing the job**\n2. **Rehydrate that context when the job executes**\n3. **Start a new span as a child of the original span**\n\n---\n\n## 🛠 The Solution in .NET with Hangfire and Datadog\n\n### Step 1: Capture the Trace Context\n\nWhen queuing a background job, we extract the current trace context using `Datadog.Trace` and save it to Hangfire's Job Parameters:\n\n```csharp\npublic string Enqueue(BackgroundJob job) : IBackgroundJobQueuer\n{\n    var jobId = _backgroundJobClient.Enqueue(p => p.Process(job));\n\n    var scope = Tracer.Instance.ActiveScope;\n    if (scope != null)\n    {\n        var traceId = scope.Span.TraceId.ToString();\n        var spanId = scope.Span.SpanId.ToString();\n\n        using var connection = JobStorage.Current.GetConnection();\n        connection.SetJobParameter(jobId, \"TraceId\", traceId);\n        connection.SetJobParameter(jobId, \"ParentSpanId\", spanId);\n    }\n\n    return jobId;\n}\n```\n\n---\n\n### Step 2: Create a Hangfire Filter to Restore the Context\n\nBefore the background job runs, we use a `IServerFilter` to start a new span linked to the original trace:\n\n```csharp\npublic sealed class DatadogTracingFilter : IServerFilter\n{\n    private const string ScopeKey = \"DatadogScope\";\n\n    public void OnPerforming(PerformingContext context)\n    {\n        var traceIdStr = context.Connection.GetJobParameter(context.BackgroundJob.Id, \"TraceId\");\n        var parentSpanIdStr = context.Connection.GetJobParameter(context.BackgroundJob.Id, \"ParentSpanId\");\n\n        if (ulong.TryParse(traceIdStr, out var traceId) &&\n            ulong.TryParse(parentSpanIdStr, out var parentSpanId))\n        {\n            var tracer = Tracer.Instance;\n\n            var settings = new SpanCreationSettings\n            {\n                Parent = new SpanContext(traceId, parentSpanId)\n            };\n\n            var scope = tracer.StartActive(\"background.job\", settings);\n            scope.Span.ResourceName = context.BackgroundJob.Job.Type.Name;\n            scope.Span.SetTag(\"hangfire.job_id\", context.BackgroundJob.Id);\n            scope.Span.SetTag(\"background.job_type\", context.BackgroundJob.Job.Type.FullName);\n            scope.Span.SetTag(\"dd.trace_id\", traceIdStr);\n\n            context.Items[ScopeKey] = scope;\n        }\n    }\n\n    public void OnPerformed(PerformedContext context)\n    {\n        if (context.Items.TryGetValue(ScopeKey, out var scopeObj) && scopeObj is Scope scope)\n        {\n            scope.Dispose();\n        }\n    }\n}\n```\n\n---\n\n### Step 3: Register the Filter\n\nMake sure this filter is registered globally in your Hangfire setup:\n\n```csharp\nGlobalJobFilters.Filters.Add(new DatadogTracingFilter());\n```\n\n---\n\n## 🧭 What I Learned (That Applies Beyond .NET)\n\n### 1. Observability is Not Automatic\n\nJust because you're using an APM tool doesn't mean your observability is complete. You still need to be intentional about **propagating context across boundaries** like queues, jobs, and microservices.\n\n### 2. Traces and Logs Are Not the Same\n\nYou might be logging a `trace_id`, but unless that ID is part of a real, active trace context — **your traces won't be linked**.\n\n### 3. Spans Must Be Linked Explicitly\n\nCreating a new span doesn't mean it's part of an existing trace. To link spans, you must **pass the parent context** — either via headers (in web requests), or job metadata (like we did).\n\n### 4. Tags Help Humans, Context Helps Systems\n\nSetting `dd.trace_id` as a tag is helpful for searching, but it's not enough to link spans. **Tags are for you; context is for the APM**.\n\n---\n\n## 📦 Bonus: Why Not OpenTelemetry?\n\nYes, OpenTelemetry could help standardize this, and Datadog supports OTLP ingestion. But:\n\n- OpenTelemetry is still evolving in .NET\n- Datadog's native SDK offers powerful control\n- This solution works now — and plays well with Datadog's UI\n\nThat said, the principles here still apply if you're using OTEL — it just changes **how** you carry and restore context.\n\n---\n\n## 🔚 Final Thoughts\n\nGetting this working took some deep dives — not just into code, but into how distributed tracing *really works*. But now, when I look at a trace in Datadog and see an HTTP request linked cleanly to a background job, it feels worth it.\n\n> Observability isn't just about capturing data — it's about **connecting it**.\n\n---\n\n👋 Have questions or want to see how this fits into your stack? Reach out or leave a comment!\n\n[Back to Home](/) "
  },
  {
    "slug": "microservices-manageable-dotnet-aspire",
    "title": "Making Microservices Manageable with .NET Aspire, Git Submodules, and OpenTelemetry",
    "description": "Let's look at .NET Aspire as a potential solution to microservices development",
    "publishedAt": "2025-02-05",
    "author": {
      "name": "Carlos Salamanca"
    },
    "categories": [
      {
        "name": "Software Engineering"
      }
    ],
    "content": "\n# Making Microservices Manageable with .NET Aspire, Git Submodules, and OpenTelemetry\n\nMicroservices give us flexibility. They also give us a headache.\n\nAt their best, microservices enable independent deployment, scalability, and team autonomy. But too often, they introduce local development chaos, debugging nightmares, and operational overhead—especially when we're just trying to deliver cohesive **products**, not architecture for architecture's sake.\n\nThis post explores how we can tame microservices using [.NET Aspire](https://devblogs.microsoft.com/dotnet/introducing-dotnet-aspire/), Git submodules, and local OpenTelemetry tracing. We'll walk through practical strategies to create a **monorepo-like developer experience**—even when you don't have a monorepo.\n\n---\n\n## 👎 The Reality of Microservices in Practice\n\nWhile microservices are great for deployment and scalability, they tend to:\n\n- **Break local dev workflows**: You need to spin up multiple services manually, in the right order, with the right env variables and ports.\n- **Make debugging painful**: Tracing a request across multiple services becomes a guessing game.\n- **Fragment ownership**: Services owned by different teams may live in different repos, on different deployment pipelines, and with different assumptions.\n- **Slow onboarding**: New developers often spend more time setting up services than writing code.\n\nThese are real tradeoffs—and often overlooked when teams jump on the \"microservices\" bandwagon.\n\n---\n\n## ✅ But We're Building Products\n\nDespite the architectural breakdown of services, what we're actually delivering is a **product**. That means we care more about how all the pieces fit together than the internals of each individual service.\n\nWhen you're building a product:\n\n- **Local cohesion matters.**\n- **Cross-service observability matters.**\n- **Running everything quickly and predictably matters.**\n\nThis is where `.NET Aspire` comes in.\n\n---\n\n## 🚀 .NET Aspire to the Rescue\n\n`.NET Aspire` is a new stack from Microsoft designed to make building distributed apps easier. It gives you a structured way to define, compose, and run a multi-service application locally.\n\nAspire supports things like:\n\n- Declarative service definitions\n- Local dev orchestration (like Docker Compose, but smarter and .NET-native)\n- Native integration with OpenTelemetry\n- IDE tooling and launch profiles out of the box\n\nLet's look at an example:\n\n```csharp\nvar builder = DistributedApplication.CreateBuilder(args);\n\nvar service1 = builder.AddProject(\"service1\", \"../services/service1/Service1.API.csproj\")\n    .WithHttpsEndpoint(port: 7001, name: \"api\");\n\nvar service2 = builder.AddProject(\"service2\", \"../services/service2/Service2.API.csproj\")\n    .WithReference(service1)\n    .WithEnvironment(\"Service1__Uri\", service1.GetEndpoint(\"api\"));\n\nvar frontend = builder.AddYarnApp(\"frontend\", \"../services/frontend\", \"dev\")\n    .WithReference(service1)\n    .WithReference(service2)\n    .WithEnvironment(\"VITE_SERVICE1_URL\", service1.GetEndpoint(\"api\"))\n    .WithEnvironment(\"PORT\", \"5174\")\n    .WithHttpsEndpoint(targetPort: 5174, port: 5173, name: \"client\");\n\nbuilder.Build().Run();\n```\n\nThis Aspire `Program.cs` script declares how your product is composed. It specifies startup order, environment variables, references, ports, and more—all in one place.\n\n---\n\n## 🔗 Git Submodules: Repo Independence, Dev Cohesion\n\nWhat if your services live in separate repositories?\n\nThat's where Git submodules help. You can add each service as a submodule to your Aspire app repository:\n\n```bash\ngit submodule add https://example.com/service1 services/service1\ngit submodule add https://example.com/service2 services/service2\ngit submodule add https://example.com/frontend services/frontend\n```\n\nThis allows:\n\n- Teams to retain ownership and versioning of individual services\n- The Aspire app to pull them in for local dev and orchestration\n- Isolation of concerns with a single command to clone everything:\n\n```bash\ngit clone --recurse-submodules https://example.com/aspire-app\n```\n\n> ✅ Bonus: In your `.gitmodules`, specify `branch = main` if your submodules don't default to it.\n\n---\n\n## 🔍 Distributed Tracing: Don't Debug in the Dark\n\nLocal dev is one thing. But once multiple services are talking to each other, tracing becomes essential. Aspire supports OpenTelemetry (OTel) out of the box.\n\nYou can even add your own tracing collector:\n\n```csharp\nbuilder.AddOpenTelemetryCollector(\"otel\")\n    .WithHttpEndpoint(port: 4318);\n```\n\nAnd then configure your services and frontends to send traces to `http://localhost:4318`.\n\nFor a React/Vite frontend in dev mode:\n\n```env\n# .env file\nVITE_OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4318\n```\n\nThen, in your code:\n\n```ts\nimport { WebTracerProvider } from '@opentelemetry/sdk-trace-web';\n\nif (import.meta.env.MODE === 'development') {\n  const provider = new WebTracerProvider();\n  // Configure exporter + tracing logic\n}\n```\n\nNow, whether it's a `.NET API` or a `React app`, you can follow a trace from click to DB and back—all locally.\n\n---\n\n## 🧠 Big Takeaways\n\n1. **You don't need a monorepo to get a monorepo-like experience.**\n   - Use `.NET Aspire` + Git submodules to orchestrate services locally.\n\n2. **Deliver products, not services.**\n   - Think about the full product experience, from frontend to DB, not just isolated deployables.\n\n3. **Use distributed tracing—even in dev.**\n   - Set up local OpenTelemetry to debug and diagnose with confidence.\n\n4. **Simplify local development.**\n   - Aspire helps you run your product with one command, instead of 5 terminals and a README.\n\n---\n\n## 🧪 Final Thoughts\n\nMicroservices are here to stay—but the way we develop with them has to evolve. `.NET Aspire`, Git submodules, and OpenTelemetry can bridge the gap between independent services and cohesive product delivery.\n\nIf you're drowning in `docker-compose.yml` files or juggling 6 terminal windows every time you onboard a new dev, give Aspire a look. You might just enjoy building distributed systems again.\n\n\n[Back to Home](/) "
  },
  {
    "slug": "key-habits-effective-leader-covey",
    "title": "Key Habits of a Leader",
    "description": "Some reflections on The 7 Habits of Highly Effective People by Stephen Covey",
    "publishedAt": "2025-01-31",
    "author": {
      "name": "Carlos Salamanca"
    },
    "categories": [
      {
        "name": "Leadership"
      }
    ],
    "content": "\n# Some Key Habits of a Leader\n\nI recently finished reading The 7 Habits of Highly Effective People by Stephen Covey, and it was eye-opening! These habits aren't just theories—they're practical principles that have reshaped how I approach both work and life.\n\nA few habits that really hit home for me:\n\n## Win/Win\n\nThink Win/Win: As someone working with products, I've seen firsthand how prioritizing mutual success builds stronger relationships. When you aim for outcomes that benefit both customers and stakeholders, you create partnerships that last.\n\n## First Understand, Then Be Understood\n\nSeek First to Understand, Then to Be Understood: This one really changed how I handle conversations—especially tough ones. Listening with empathy has helped me uncover customer needs I might have missed and find clarity in complex team discussions.\n\n## Synergize\n\nSynergize: Collaboration isn't just a buzzword—it's a game changer. Some of the best solutions I've been part of didn't come from me or any one person. They came from combining diverse perspectives across teams. It's amazing what happens when you embrace creativity and trust in others' expertise.\n\n## Sharpen the Saw\n\nSharpen the Saw: Covey talks about renewal, and this resonated deeply. I've realized how critical it is to invest in personal growth—whether it's through learning, rest, or even stepping back to reflect. Growth isn't a sprint; it's a marathon.\n\n\n## Trust\nFor me, the biggest shift was embracing Covey's concept of the \"emotional bank account.\" Every interaction—whether with customers, peers, or family—is a deposit or a withdrawal. Building trust, showing kindness, and keeping commitments aren't just nice ideas; they're the foundation of meaningful relationships.\n\nThese habits offer fresh remainders that tech is more than software—it's about people. When we lead with empathy and collaboration, we don't just deliver value; we create impact that lasts.\n\nWhat habits or principles have shaped how you work and lead?\n\n[Back to Home](/) "
  },
  {
    "slug": "equifax",
    "title": "What I learned from Equifax",
    "description": "",
    "publishedAt": "2024-12-01",
    "author": {
      "name": "Carlos Salamanca"
    },
    "categories": [
      {
        "name": "Leadership"
      }
    ],
    "content": "\n# What I learned from Equifax\n\nThe Equifax data breach of 2017 was more than just a cybersecurity failure—it was an organizational one. Sensitive information from 147 million people was exposed, but what compounded the damage was how the company handled it. The breach started in May, but it took months for leadership, including the CEO, to even learn of the problem. By the time the public was informed, trust had been obliterated—not just because of the breach itself, but because of the delayed and opaque response.\n\nHere’s the hard truth: organizational failures of this magnitude rarely start with technical flaws. They stem from cultural gaps—gaps in transparency, accountability, and ownership.\n\nSo what lessons can we learn from Equifax?\n\n## 1. Transparency Must Start at the Top\n\nTransparency isn’t just about being upfront with customers. It’s about building a culture where bad news travels fast and effectively within the organization. Leaders must create an environment where teams feel empowered—and obligated—to escalate issues without fear of blame.\n\n## 2. Ownership is Organizational\n\nSecurity, like success, is everyone’s responsibility. A culture of ownership starts at the top and filters down. Leaders need to set the example, treating risks and vulnerabilities as shared challenges, not isolated team problems.\n\n## 3. Build Systems that Support Culture\n\nEven the best intentions mean little without processes to back them up. Organizations must invest in tools and workflows that enable rapid escalation, clear communication, and swift decision-making. Leadership cannot act on what they don’t know.\n\nThink about this: If a breach happened today, how long would it take for your organization’s leadership to learn about it? Would your teams have the trust and infrastructure to respond decisively? Would your customers hear the truth before rumors spread?\n\nThe Equifax breach reminds us that technical safeguards are only part of the equation. The bigger question is whether your organization has the cultural and structural readiness to face challenges head-on—with transparency and ownership leading the charge.\n\nWhen challenges arise, does your organization’s culture enable a quick, honest response? Or does it risk letting small issues snowball into crises?\n\n[Back to Home](/) "
  }
]