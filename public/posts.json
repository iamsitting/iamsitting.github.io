[
  {
    "slug": "getting-started-with-react",
    "title": "Getting Started with React",
    "description": "A comprehensive guide to building your first React application",
    "publishedAt": "2024-03-20",
    "author": {
      "name": "Carlos Salamanca"
    },
    "category": {
      "name": "React"
    },
    "content": "\n# Getting Started with React\n\nReact has revolutionized the way we build user interfaces. In this guide, we'll explore the fundamentals of React and build a simple application.\n\n## Why React?\n\nReact offers several advantages:\n\n- Component-based architecture\n- Virtual DOM for better performance\n- Large ecosystem of libraries\n- Strong community support\n\n## Setting Up Your First Project\n\nYou can create a new React project using Create React App:\n\n```bash\nnpx create-react-app my-app\ncd my-app\nnpm start\n```\n\n## Understanding Components\n\nComponents are the building blocks of React applications. Here's a simple example:\n\n```jsx\nfunction Welcome(props) {\n  return <h1>Hello, {props.name}</h1>;\n}\n\n// Usage\n<Welcome name=\"React Developer\" />\n```\n\n## State Management\n\nReact's state management is powerful yet simple:\n\n```jsx\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>\n        Increment\n      </button>\n    </div>\n  );\n}\n```\n\n## Best Practices\n\n1. Keep components small and focused\n2. Use functional components with hooks\n3. Implement proper error boundaries\n4. Follow the single responsibility principle\n\n## Conclusion\n\nReact provides a solid foundation for building modern web applications. Start small, experiment, and gradually explore more advanced features.\n\n[Back to Home](/) "
  },
  {
    "slug": "hello-world",
    "title": "Hello World",
    "description": "My first blog post",
    "publishedAt": "2024-03-20",
    "author": {
      "name": "Carlos Salamanca"
    },
    "category": {
      "name": "General"
    },
    "content": "\n# Hello World\n\nThis is my first blog post. I'm excited to share my thoughts and ideas with you.\n\n## Why I'm Writing\n\nI believe in the power of sharing knowledge and experiences. Through this blog, I hope to:\n\n- Share insights from my work\n- Document my learning journey\n- Connect with like-minded individuals\n- Contribute to the community\n\n## What to Expect\n\nIn future posts, I'll be covering topics like:\n\n1. Software Engineering\n2. Artificial Intelligence\n3. System Design\n4. Education and Learning\n\n## Code Example\n\nHere's a simple Python function:\n\n```python\ndef greet(name):\n    return f\"Hello, {name}!\"\n\n# Usage\nprint(greet(\"World\"))\n```\n\n## Math Support\n\nSometimes we need to express mathematical concepts:\n\n$E = mc^2$\n\n## Conclusion\n\nI'm looking forward to writing more posts and engaging with readers. Stay tuned for more content!\n\n[Back to Home](/) "
  },
  {
    "slug": "tailwind-css-mastery",
    "title": "Mastering Tailwind CSS",
    "description": "Learn how to build beautiful, responsive designs with Tailwind CSS",
    "publishedAt": "2024-03-18",
    "author": {
      "name": "Carlos Salamanca"
    },
    "category": {
      "name": "CSS"
    },
    "content": "\n# Mastering Tailwind CSS\n\nTailwind CSS has changed how we approach styling in web development. Let's explore its power and flexibility.\n\n## Why Tailwind?\n\nTailwind CSS offers several benefits:\n\n- Utility-first approach\n- Highly customizable\n- Small bundle size\n- Great developer experience\n\n## Basic Usage\n\nHere's a simple card component using Tailwind:\n\n```html\n<div class=\"max-w-sm rounded-lg shadow-lg bg-white p-6\">\n  <h2 class=\"text-2xl font-bold text-gray-800 mb-4\">\n    Card Title\n  </h2>\n  <p class=\"text-gray-600\">\n    This is a sample card component styled with Tailwind CSS.\n  </p>\n  <button class=\"mt-4 bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded\">\n    Click Me\n  </button>\n</div>\n```\n\n## Responsive Design\n\nTailwind makes responsive design easy:\n\n```html\n<div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n  <div class=\"bg-gray-100 p-4\">Item 1</div>\n  <div class=\"bg-gray-100 p-4\">Item 2</div>\n  <div class=\"bg-gray-100 p-4\">Item 3</div>\n</div>\n```\n\n## Dark Mode\n\nTailwind's dark mode support is powerful:\n\n```html\n<div class=\"bg-white dark:bg-gray-800 text-gray-900 dark:text-white p-4\">\n  <h1 class=\"text-2xl font-bold\">Dark Mode Example</h1>\n  <p class=\"mt-2\">This text changes color in dark mode.</p>\n</div>\n```\n\n## Customization\n\nYou can customize Tailwind in your `tailwind.config.js`:\n\n```javascript\nmodule.exports = {\n  theme: {\n    extend: {\n      colors: {\n        primary: '#4CAF50',\n        secondary: '#66BB6A',\n      },\n      spacing: {\n        '128': '32rem',\n      },\n    },\n  },\n  plugins: [],\n}\n```\n\n## Best Practices\n\n1. Use component classes for repeated patterns\n2. Leverage the @apply directive for complex styles\n3. Keep your HTML clean and readable\n4. Use the official Tailwind plugins\n\n## Conclusion\n\nTailwind CSS provides a modern approach to styling web applications. Its utility-first philosophy and flexibility make it a great choice for any project.\n\n[Back to Home](/) "
  },
  {
    "slug": "typescript-tips-and-tricks",
    "title": "TypeScript Tips and Tricks",
    "description": "Advanced TypeScript patterns and best practices for better type safety",
    "publishedAt": "2024-03-19",
    "author": {
      "name": "Carlos Salamanca"
    },
    "category": {
      "name": "TypeScript"
    },
    "content": "\n# TypeScript Tips and Tricks\n\nTypeScript has become an essential tool in modern web development. Let's explore some advanced patterns and best practices.\n\n## Type Inference\n\nTypeScript's type inference is powerful:\n\n```typescript\n// TypeScript infers the return type\nfunction add(a: number, b: number) {\n  return a + b;\n}\n\n// Explicit type annotation\ntype AddFunction = (a: number, b: number) => number;\n```\n\n## Utility Types\n\nTypeScript provides several utility types:\n\n```typescript\ninterface User {\n  id: number;\n  name: string;\n  email: string;\n  role: 'admin' | 'user';\n}\n\n// Make all properties optional\ntype PartialUser = Partial<User>;\n\n// Pick specific properties\ntype UserCredentials = Pick<User, 'email' | 'name'>;\n\n// Omit specific properties\ntype UserWithoutId = Omit<User, 'id'>;\n```\n\n## Advanced Types\n\nHere are some advanced type patterns:\n\n```typescript\n// Union types\ntype Status = 'loading' | 'success' | 'error';\n\n// Intersection types\ntype AdminUser = User & {\n  permissions: string[];\n};\n\n// Mapped types\ntype ReadonlyUser = {\n  readonly [K in keyof User]: User[K];\n};\n```\n\n## Type Guards\n\nType guards help narrow down types:\n\n```typescript\nfunction isAdmin(user: User): user is AdminUser {\n  return user.role === 'admin';\n}\n\nfunction processUser(user: User) {\n  if (isAdmin(user)) {\n    // TypeScript knows user is AdminUser here\n    console.log(user.permissions);\n  }\n}\n```\n\n## Best Practices\n\n1. Use strict mode\n2. Leverage type inference when possible\n3. Create reusable type definitions\n4. Document complex types\n\n## Conclusion\n\nTypeScript's type system is powerful and flexible. These patterns will help you write more maintainable and type-safe code.\n\n[Back to Home](/) "
  }
]